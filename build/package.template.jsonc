/*
 * File: build/package.template.jsonc
 * 
 * A template file for auto-generated package.json file.
 * Edit this file to make changes to json file.
 */
 
 {
	"x-moyal-auto-generated-comment": "THIS IS AN AUTO_GENERATED FILE. DON'T EDIT IT! INSTEAD EDIT build/package.template.jsonc and project.settings.jsonc",
	"name": "{{scope}}/{{lib}}",
	"version": "{{version}}",
	"description": "{{description}}",
	"type": "module",
	"types": "{{outputFolder}}/types/{{outputBaseFilename}}.d.ts",
	"sideEffects": "::placeholder::", 
	"main": "{{outputFolder}}/{{outputBaseFilename}}.cjs.js",
	"module": "{{outputFolder}}/{{outputBaseFilename}}.mjs",
	"browser": "{{outputFolder}}/{{outputBaseFilename}}.umd.js",
	"exports": {
		"require": "{{outputFolder}}/{{outputBaseFilename}}.cjs.js",
		"import": "{{outputFolder}}/{{outputBaseFilename}}.mjs"
	},
	"author": "{{author}}",
	"license": "{{license}}",
	"scripts": {
		/* utils*/
		"types": "node ./scripts/generate-ts.js",
		"validate:has-commits": "node ./scripts/validate-has-commits.js", /* Validates that the git has any commits so far and it is not a clean new project with no commits so far */
		"validate:clean": "node ./scripts/validate-clean.js", /* validates that there are no uncommited changes (internally it includes the logic of validate:has-commits) */

		/* synchronizing */
		"sync:package": "node ./scripts/sync-package.js", /* synchronize the content of package.json with the merged content of this template and project.settings.js */
		"sync:back-to-project-settings": "node ./scripts/sync-back-to-project-settings.js", /* synchronize the content of project.settings.jsonc with values from package.json */
		"sync:build-info": "node ./scripts/sync-build-info.js", /* updates autogenerated source script with build information (version, etc...) */
		"sync": "npm run sync:package && npm run sync:build-info",
		"sync:back": "npm run sync:back-to-project-settings && npm run sync:build-info",

		/* testing and linting */
		"test": "node ./scripts/test.js", /* run test for NodeJS */
		"lint": "eslint src/ test/", /* run lint against source and test folders */
		"check": "npm run lint && npm run test", /* full check! */
		
		/* version commands */
		"preversion": "npm run validate:clean && npm run check",
		"version": "npm run sync:back && git add project.settings.jsonc", /* Synchronizes back the new version, dependencies, etc... */
		"postversion": "node ./scripts/version-post.js",
		
		/* version shortcust fo sub-commands */
		"version:alpha": "npm version prerelease --preid=alpha", // sets or increments alpha → 1.2.3 → 1.2.3-alpha.1
		"version:beta": "npm version prerelease --preid=beta", // sets or increments beta → 1.2.3 → 1.2.3-beta.1; 1.2.3-beta.1 → 1.2.3-beta.2; 1.2.3-alpha.1 → 1.2.3-beta.1;
		"version:rc": "npm version prerelease --preid=rc", // sets or increments rc (release candidate) → 1.2.3 → 1.2.3-rc.1; 1.2.3-rc.1 → 1.2.3-rc.2; 1.2.3-beta.1 → 1.2.3-rc.1;
		"version:patch": "npm version patch", // increments patch e.g. 1.2.3 → 1.2.4
		"version:minor": "npm version minor", // increments minor e.g. 1.2.3 → 1.3.0
		"version:major": "npm version major", // increments major e.g. 1.2.3 → 2.0.0
		"version:current": "node ./scripts/version-current.js", // create tag for the current version (without bumping) and push it remotely.
		"version:release": "node ./scripts/version-release.js", /* if exist - drops alpha/beta but do not increment patch; imcrement patch if there is no alpha/beta */

		/* docs */
		"docs:readme": "node ./scripts/generate-readme.js",
		"docs:api:html": "npx jsdoc --readme README.md src -r -d docs --verbose --template ./node_modules/docdash",
		"docs:api:md": "jsdoc2md src/**/*.js > API.md",
		"docs:api": "npm run docs:api:html && npm run docs:api:md",
		"docs": "node ./scripts/generate-docs.js",

		/* dependencies installation */
		"postinstall": "npm run sync:back", /* update project settings back after install dependencies */

		/* building (and related) scripts */
		
		"clean": "node ./scripts/clean.js",
		"prebuild": "npm run sync && npm run check", /* update package.json from project.settings.jsonc before building */
		"build": "npm run clean && npm run types && node ./scripts/build.js",

		/* packing */
		"prepack": "npm run validate:clean && npm run build && npm run docs", /* build before pack */
		"pack:local": "npm run publish:switch && bash ./scripts/pack-local.sh && node ./scripts/publish-switch.js restore", 
		"pack:preview": "bash ./scripts/pack-preview.sh",
		"pack": "npm run pack:local && npm run pack:preview",

		/* publish and related */
		"prepublishOnly": "npm run build && npm run docs",
		"validate:logged-in": "node ./scripts/validate-logged-in.js", 
		"publish:switch": "node ./scripts/publish-switch.js switch",
		"publish:npm": "npm run validate:logged-in && npm run publish:switch && npm publish --access public && node ./scripts/publish-switch.js restore", // publish the library to NPM
		"release": "npm run validate:logged-in && npm run build && npm run version:release && npm run publish:npm" // increments the patch and release it to GitHub (adding tag) and NPM.
	},
	"dependencies": "::placeholder::", 
	"devDependencies": "::placeholder::", /* dependencies required only during development */
	/* output packed files - what goes into the final tarball during npm pack */
	"files": [
		"{{outputFolder}}/",
		"README.md",
		"LICENSE"
	],
	"repository": {
		"type": "git",
		"url": "git+https://github.com/{{git:username}}/{{git:repository-name}}.git"
	},
	"keywords": "::placeholder::"
}
